-- Ensure Packer is installed
local ensure_packer = function()
    local fn = vim.fn
    local install_path = fn.stdpath('data') .. '/site/pack/packer/start/packer.nvim'
    if fn.empty(fn.glob(install_path)) > 0 then
        fn.system({ 'git', 'clone', '--depth', '1', 'https://github.com/wbthomason/packer.nvim', install_path })
        vim.cmd [[packadd packer.nvim]]
        return true
    end
    return false
end

local packer_bootstrap = ensure_packer()


-- Other configurations...

-- Set up LuaSnip
local luasnip = require('luasnip')
luasnip.config.set_config {
    enable_jsregexp = true, -- Enable jsregexp
}



vim.g.mapleader = " "

-- Set options
vim.opt.number = true
vim.opt.relativenumber = true
vim.opt.expandtab = true
vim.opt.shiftwidth = 2
vim.opt.conceallevel = 1 -- Set conceallevel for Obsidian

-- Use ctrl-[hjkl] to select the active split
vim.api.nvim_set_keymap('n', '<C-k>', ':wincmd k<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<C-j>', ':wincmd j<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<C-h>', ':wincmd h<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<C-l>', ':wincmd l<CR>', { noremap = true, silent = true })

-- Telescope bindings
local builtin = require('telescope.builtin')
vim.keymap.set('n', '<leader>ff', builtin.find_files, {})
vim.keymap.set('n', '<leader>fg', builtin.live_grep, {})
vim.keymap.set('n', '<leader>fb', builtin.buffers, {})
vim.keymap.set('n', '<leader>fh', builtin.help_tags, {})

-- Auto-save for all Markdown notes with debounce
local timer = vim.loop.new_timer()
local function debounced_save()
    if timer:is_active() then
        timer:stop()
    end
    timer:start(3000, 0, vim.schedule_wrap(function()
        local filetype = vim.bo.filetype
        if filetype == "markdown" then
            vim.cmd("silent! write")
        end
    end))
end

vim.api.nvim_create_autocmd({ "TextChanged", "TextChangedI" }, {
    pattern = { "*.md" },
    callback = debounced_save
})

-- Plugin setup
require('packer').startup(function(use)
    -- Packer can manage itself
    use 'wbthomason/packer.nvim'

    -- Your plugins
    use 'tpope/vim-sensible'

    -- Gruvbox theme
    use 'morhetz/gruvbox'

    -- Other plugins
    use 'nvim-lua/plenary.nvim'
    use 'HakonHarnes/img-clip.nvim'
    use 'rhysd/vim-healthcheck'
    use { 'nvim-telescope/telescope-fzf-native.nvim', run = 'make' }
    use { 'nvim-telescope/telescope.nvim', tag = '0.1.8' }
    use 'neovim/nvim-lspconfig'
    use 'echasnovski/mini.nvim'

    use 'HiPhish/rainbow-delimiters.nvim'

    use {
        'nvim-treesitter/nvim-treesitter',
        run = ':TSUpdate'
    }

    -- NERDTree and recommended plugins
    use 'preservim/nerdtree'
    use 'Xuyuanp/nerdtree-git-plugin'
    use 'ryanoasis/vim-devicons'
    use 'tiagofumo/vim-nerdtree-syntax-highlight'
    use 'PhilRunninger/nerdtree-visual-selection'

    -- Obsidian plugin
    use({
        "epwalsh/obsidian.nvim",
        tag = "*",
        requires = {
            "nvim-lua/plenary.nvim",
            "nvim-telescope/telescope.nvim",
            "godlygeek/tabular",
            "preservim/vim-markdown",
        },
        config = function()
            require("obsidian").setup({
                workspaces = {
                    {
                        name = "ObsidianNotes",
                        path = "~/ObsidianNotes",
                    },
                },
                new_notes_location = "current_dir",
                templates = {
                    folder = "Obsidian/Templates",
                    date_format = "%Y-%m-%d-%a",
                    time_format = "%H:%M",
                },

                daily_notes = {
                    folder = "Daily/Planning",
                    date_format = "%Y-%m-%d",
                    alias_format = "%B %-d, %Y",
                    default_tags = { "daily-notes" },
                    template = 'Obsidian/Templates/DailyNoteTemplate.md'
                },
            })
        end,
    })
    -- Keybindings for Obsidian plugin
    vim.api.nvim_set_keymap('n', '<leader>ot', ':ObsidianTemplate<CR>', { noremap = true, silent = true })
    vim.api.nvim_set_keymap('n', '<leader>od', ':ObsidianToday<CR>', { noremap = true, silent = true })
    vim.api.nvim_set_keymap('n', '<leader>on', ':ObsidianNew<CR>', { noremap = true, silent = true })
    vim.api.nvim_set_keymap('n', '<leader>oq', ':ObsidianQuickSwitch<CR>', { noremap = true, silent = true })

    use {
        "FeiyouG/commander.nvim",
        requires = { "nvim-telescope/telescope.nvim" }
    }

    use {
        'gelguy/wilder.nvim',
        config = function()
            local wilder = require('wilder')
            wilder.setup({ modes = { ':', '/', '?' } })
        end,
    }

    use('jose-elias-alvarez/null-ls.nvim')
    use('MunifTanjim/prettier.nvim')

    use 'm4xshen/autoclose.nvim'

    -- Copilot plugin
    use {
        "zbirenbaum/copilot.lua",
        cmd = "Copilot",
        event = "InsertEnter",
        config = function()
            require("copilot").setup({
                suggestion = {
                    enabled = true,
                    auto_trigger = true,
                    debounce = 75,
                    keymap = {
                        accept = "<Tab>",
                        accept_word = false,
                        accept_line = false,
                        next = "<M-]>",
                        prev = "<M-[>",
                        dismiss = "<C-]>",
                    },
                },
                panel = { enabled = false },
            })
        end,
    }

    -- Which-key plugin
    use {
        "folke/which-key.nvim",
        config = function()
            vim.o.timeout = true
            vim.o.timeoutlen = 300
            require("which-key").setup {
                -- Your which-key configuration here
            }
        end
    }

    -- Completion plugins
    use 'hrsh7th/nvim-cmp'
    use 'hrsh7th/cmp-nvim-lsp'
    use 'hrsh7th/cmp-buffer'
    use 'hrsh7th/cmp-path'
    use 'hrsh7th/cmp-cmdline'
    use 'L3MON4D3/LuaSnip' -- Snippet engine
    use 'saadparwaiz1/cmp_luasnip'

    -- Dart and Flutter plugins
    use 'dart-lang/dart-vim-plugin'
    use {
        'akinsho/flutter-tools.nvim',
        requires = {
            'nvim-lua/plenary.nvim',
            'stevearc/dressing.nvim',
        },
    }
    use 'mfussenegger/nvim-dap'             -- Debug Adapter Protocol client
    use 'nvim-telescope/telescope-dap.nvim' -- DAP integration with Telescope

    -- Add nvim-web-devicons
    use 'nvim-tree/nvim-web-devicons'

    -- Automatically set up your configuration after cloning packer.nvim
    if packer_bootstrap then
        require('packer').sync()
    end
end)

-- Plugin configurations (outside of Packer setup)

-- Gruvbox settings
vim.o.background = "dark"              -- Use "light" if you prefer light mode
vim.g.gruvbox_contrast_dark = "medium" -- Options: "hard", "medium", "soft"
vim.g.gruvbox_invert_selection = 0

-- Apply the Gruvbox colorscheme
vim.cmd.colorscheme("gruvbox")

-- Set the GUI font (if using a GUI version of Neovim)
vim.o.guifont = "CommitMono Nerd Font Mono Italic:h14" -- Adjust the size as needed

-- Set up img-clip
require("img-clip").setup({
    -- Your img-clip configuration here
})

-- Set up Treesitter
require('nvim-treesitter.configs').setup {
    ensure_installed = {
        "bash",
        "c",
        "cpp",
        "css",
        "dart",
        "html",
        "javascript",
        "json",
        "lua",
        "markdown",
        "python",
        "rust",
        "typescript",
        "vim",
    },
    sync_install = false,
    highlight = {
        enable = true,
    },
    ignore_install = { "systemverilog", "verilog" }, -- Exclude problematic parsers
}

-- NERDTree configurations
vim.g.NERDTreeShowHidden = 1
vim.g.NERDTreeMinimalUI = 1
vim.g.NERDTreeIgnore = {}
vim.g.NERDTreeStatusline = ''

-- Automatically close nvim if NERDTree is the only thing left open
vim.cmd([[
  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
]])

-- Toggle NERDTree
vim.api.nvim_set_keymap('n', '<leader>n', ':NERDTreeToggle<CR>', { noremap = true, silent = true })

-- Find current file in NERDTree
vim.api.nvim_set_keymap('n', '<leader>f', ':NERDTreeFind<CR>', { noremap = true, silent = true })

-- Set up Commander
require("commander").setup()

-- Set up telescope with fzf
require('telescope').setup {
    extensions = {
        fzf = {
            fuzzy = true,                   -- false will only do exact matching
            override_generic_sorter = true, -- override the generic sorter
            override_file_sorter = true,    -- override the file sorter
            case_mode = "smart_case",       -- or "ignore_case" or "respect_case"
        }
    }
}
-- Load the fzf extension for Telescope
pcall(require('telescope').load_extension, 'fzf')

-- Set up Autoclose
require("autoclose").setup()

-- Set up Rainbow Delimiters
local rainbow_delimiters = require('rainbow-delimiters')

vim.g.rainbow_delimiters = {
    strategy = {
        [''] = rainbow_delimiters.strategy.global,
        vim = rainbow_delimiters.strategy.global,
    },
    query = {
        [''] = 'rainbow-delimiters',
        lua = 'rainbow-blocks',
        javascript = 'rainbow-delimiters', -- Corrected query name
    },
    highlight = {
        'RainbowDelimiterRed',
        'RainbowDelimiterYellow',
        'RainbowDelimiterBlue',
        'RainbowDelimiterOrange',
        'RainbowDelimiterGreen',
        'RainbowDelimiterViolet',
        'RainbowDelimiterCyan',
    },
    blacklist = {},
}

-- Set up nvim-cmp
local cmp = require('cmp')

cmp.setup({
    snippet = {
        expand = function(args)
            require('luasnip').lsp_expand(args.body)
        end,
    },
    mapping = cmp.mapping.preset.insert({
        ['<C-b>']     = cmp.mapping.scroll_docs(-4),
        ['<C-f>']     = cmp.mapping.scroll_docs(4),
        ['<C-Space>'] = cmp.mapping.complete(),
        ['<C-e>']     = cmp.mapping.abort(),
        ['<CR>']      = cmp.mapping.confirm({ select = true }), -- Accept currently selected item
    }),
    sources = cmp.config.sources({
        { name = 'nvim_lsp' },
        { name = 'luasnip' }, -- For luasnip users
    }, {
        { name = 'buffer' },
    })
})

-- Set configuration for specific filetype
cmp.setup.filetype('gitcommit', {
    sources = cmp.config.sources({
        { name = 'git' },
    }, {
        { name = 'buffer' },
    })
})

-- Use buffer source for '/', '?'
cmp.setup.cmdline({ '/', '?' }, {
    mapping = cmp.mapping.preset.cmdline(),
    sources = {
        { name = 'buffer' }
    }
})

-- Use cmdline & path source for ':'
cmp.setup.cmdline(':', {
    mapping = cmp.mapping.preset.cmdline(),
    sources = cmp.config.sources(
        { { name = 'path' } },
        { { name = 'cmdline' } }
    )
})

-- Set up LuaSnip
local luasnip = require('luasnip')
luasnip.config.set_config {
    enable_jsregexp = true, -- Enable jsregexp
}

-- Set up lspconfig
local capabilities = require('cmp_nvim_lsp').default_capabilities()
local nvim_lsp = require('lspconfig')

-- Define the list of LSP servers you want to use
local servers = {
    'pyright',       -- Python
    'ts_ls',         -- Corrected LSP server name for TypeScript/JavaScript
    'rust_analyzer', -- Rust
    'clangd',        -- C/C++/Objective-C
    'gopls',         -- Go
    'sourcekit',     -- Swift
    'bashls',        -- Bash
    'dartls',        -- Dart and Flutter
    -- Add more servers as needed
}

-- Iterate over the servers and set them up
for _, lsp in ipairs(servers) do
    if lsp == 'dartls' then
        nvim_lsp[lsp].setup {
            capabilities = capabilities,
            -- Dart specific settings
            settings = {
                dart = {
                    sdkPath = os.getenv("HOME") .. "/flutter/bin/cache/dart-sdk",
                },
            },
        }
    else
        nvim_lsp[lsp].setup {
            capabilities = capabilities,
            -- Add other configuration options as needed
        }
    end
end

-- Optional: Add key mappings for LSP functions
local opts = { noremap = true, silent = true }
vim.keymap.set('n', '<space>e', vim.diagnostic.open_float, opts)
vim.keymap.set('n', '[d', vim.diagnostic.goto_prev, opts)
vim.keymap.set('n', ']d', vim.diagnostic.goto_next, opts)
vim.keymap.set('n', '<space>q', vim.diagnostic.setloclist, opts)

-- Use LspAttach autocommand to map keys after LSP attaches
vim.api.nvim_create_autocmd('LspAttach', {
    group = vim.api.nvim_create_augroup('UserLspConfig', {}),
    callback = function(ev)
        -- Enable completion triggered by <C-X><C-O>
        vim.bo[ev.buf].omnifunc = 'v:lua.vim.lsp.omnifunc'

        -- Buffer local mappings
        local bufopts = { noremap = true, silent = true, buffer = ev.buf }
        vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, bufopts)
        vim.keymap.set('n', 'gd', vim.lsp.buf.definition, bufopts)
        vim.keymap.set('n', 'K', vim.lsp.buf.hover, bufopts)
        vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, bufopts)
        vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, bufopts)
        vim.keymap.set('n', '<space>wa', vim.lsp.buf.add_workspace_folder, bufopts)
        vim.keymap.set('n', '<space>wr', vim.lsp.buf.remove_workspace_folder, bufopts)
        vim.keymap.set('n', '<space>wl', function()
            print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
        end, bufopts)
    end,
})

-- Set up null-ls and formatters
local null_ls = require("null-ls")

local group = vim.api.nvim_create_augroup("lsp_format_on_save", { clear = false })
local event = "BufWritePre" -- or "BufWritePost"
local async = event == "BufWritePost"

null_ls.setup({
    sources = {
        null_ls.builtins.formatting.prettierd.with({
            filetypes = {
                "javascript",
                "typescript",
                "javascriptreact",
                "typescriptreact",
                "css",
                "scss",
                "html",
                "json",
                "yaml",
                "markdown",
            },
        }),
        null_ls.builtins.formatting.dart_format, -- For Dart formatting
    },
    on_attach = function(client, bufnr)
        if client.supports_method("textDocument/formatting") then
            vim.keymap.set("n", "<Leader>f", function()
                vim.lsp.buf.format { bufnr = vim.api.nvim_get_current_buf() }
            end, { buffer = bufnr, desc = "[lsp] format" })

            -- Format on save
            vim.api.nvim_clear_autocmds { buffer = bufnr, group = group }
            vim.api.nvim_create_autocmd(event, {
                buffer = bufnr,
                group = group,
                callback = function()
                    vim.lsp.buf.format { bufnr = bufnr, async = async }
                end,
                desc = "[lsp] format on save",
            })
        end

        if client.supports_method("textDocument/rangeFormatting") then
            vim.keymap.set("x", "<Leader>f", function()
                vim.lsp.buf.format { bufnr = vim.api.nvim_get_current_buf() }
            end, { buffer = bufnr, desc = "[lsp] format" })
        end
    end,
})

local prettier = require("prettier")

prettier.setup({
    bin = 'prettierd', -- Use 'prettierd' instead of 'prettier' for better performance
    filetypes = {
        "css",
        "graphql",
        "html",
        "javascript",
        "javascriptreact",
        "json",
        "less",
        "markdown",
        "scss",
        "typescript",
        "typescriptreact",
        "yaml",
    },
    ["null-ls"] = {
        condition = function()
            return prettier.config_exists {
                -- if `false`, skips checking `package.json` for `"prettier"` key
                check_package_json = true,
            }
        end,
        runtime_condition = function(params)
            -- Return `false` to skip running prettier
            return true
        end,
        timeout = 5000,
    },
    cli_options = {
        arrow_parens = "always",
        bracket_spacing = true,
        bracket_same_line = false,
        embedded_language_formatting = "auto",
        end_of_line = "lf",
        html_whitespace_sensitivity = "css",
        jsx_single_quote = false,
        print_width = 80,
        quote_props = "as-needed",
        semi = true,
        single_attribute_per_line = false,
        single_quote = false,
        tab_width = 2,
        trailing_comma = "es5",
        use_tabs = false,
        vue_indent_script_and_style = false,
    },
})

vim.api.nvim_set_keymap('n', '<Leader>p', ':Prettier<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('x', '<Leader>p', ':Prettier<CR>', { noremap = true, silent = true })

-- Additional NERDTree keymappings
vim.api.nvim_set_keymap('n', '<leader>e', ':NERDTreeFocus<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<leader>tf', ':NERDTreeFind<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<leader>tc', ':NERDTreeClose<CR>', { noremap = true, silent = true })

-- NERDTree auto commands
vim.cmd([[
              " Start NERDTree when Vim starts with a directory argument
              autocmd StdinReadPre * let s:std_in=1
              autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists('s:std_in') |
                  \ execute 'NERDTree' argv()[0] | wincmd p | enew | execute 'cd '.argv()[0] | endif

              " Exit Vim if NERDTree is the only window remaining in the only tab
              autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

              " Close the tab if NERDTree is the only window remaining in it
              autocmd BufEnter * if winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

              " Open the existing NERDTree on each new tab
              autocmd BufWinEnter * if &buftype != 'quickfix' && getcmdwintype() == '' | silent NERDTreeMirror | endif
            ]])

-- NERDTree plugin configurations
vim.g.NERDTreeGitStatusUseNerdFonts = 1 -- You should have a patched font
vim.g.NERDTreeGitStatusShowIgnored = 1
vim.g.NERDTreeGitStatusUntrackedFilesMode = 'all'
vim.g.NERDTreeGitStatusShowClean = 1
vim.g.NERDTreeGitStatusConcealBrackets = 1

-- Configure the appearance of NERDTree
vim.g.NERDTreeDirArrowExpandable = '▸'
vim.g.NERDTreeDirArrowCollapsible = '▾'

vim.g.NERDTreeGitStatusIndicatorMapCustom = {
    Modified  = "✹",
    Staged    = "✚",
    Untracked = "✭",
    Renamed   = "➜",
    Unmerged  = "═",
    Deleted   = "✖",
    Dirty     = "✗",
    Ignored   = "☒",
    Clean     = "✔︎",
    Unknown   = "?",
}

-- Set up Flutter Tools
require('flutter-tools').setup {
    ui = {
        border = "rounded",
    },
    decorations = {
        statusline = {
            app_version = true,
            device = true,
        }
    },
    widget_guides = {
        enabled = true,
    },
    closing_tags = {
        highlight = "Comment", -- Highlight group for closing tags
        prefix = "//",         -- Prefix for closing tags
        enabled = true,
    },
    dev_log = {
        enabled = true,
        notify_errors = true,
    },
    lsp = {
        color = {
            enabled = true,
            background = true,
            virtual_text = true,
        },
        settings = {
            showTodos = true,
            completeFunctionCalls = true,
        },
        on_attach = function(client, bufnr)
            -- Your custom on_attach function for LSP
            -- Add key mappings or other customizations here
        end,
    },
}

-- Set up DAP configurations
local dap = require('dap')

-- Dart DAP adapter
dap.adapters.dart = {
    type = 'executable',
    command = 'dart',
    args = { 'debug_adapter' },
}

-- Flutter DAP adapter
dap.adapters.flutter = {
    type = 'executable',
    command = 'flutter',
    args = { 'debug_adapter' },
}

-- DAP configurations for Dart
dap.configurations.dart = {
    {
        type = "dart",
        request = "launch",
        name = "Launch Dart Program",
        dartSdkPath = os.getenv("HOME") .. "/flutter/bin/cache/dart-sdk/",
        flutterSdkPath = os.getenv("HOME") .. "/flutter",
        program = "${file}",
        cwd = "${workspaceFolder}",
        args = {}, -- You can pass command-line arguments to the program
    },
}

-- DAP configurations for Flutter
dap.configurations.flutter = {
    {
        type = "flutter",
        request = "launch",
        name = "Launch Flutter App",
        dartSdkPath = os.getenv("HOME") .. "/flutter/bin/cache/dart-sdk/",
        flutterSdkPath = os.getenv("HOME") .. "/flutter",
        program = "${workspaceFolder}/lib/main.dart",
        cwd = "${workspaceFolder}",
        args = {}, -- You can pass command-line arguments to the app
    },
}

-- DAP key mappings
vim.fn.sign_define('DapBreakpoint', { text = '🛑', texthl = '', linehl = '', numhl = '' })
vim.api.nvim_set_keymap('n', '<F5>', ':DapContinue<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<F10>', ':DapStepOver<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<F11>', ':DapStepInto<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<F12>', ':DapStepOut<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<Leader>b', ':DapToggleBreakpoint<CR>', { noremap = true, silent = true })
